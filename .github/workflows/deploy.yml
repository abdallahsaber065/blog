name: Deploy to VPS

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    environment: production
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      MAILGUN_USER: ${{ secrets.MAILGUN_USER }}
      MAILGUN_PASS: ${{ secrets.MAILGUN_PASS }}
      NEXT_PUBLIC_REMOTE_URL: ${{ vars.NEXT_PUBLIC_REMOTE_URL }}
      NEXT_PUBLIC_BASE_URL: ${{ vars.NEXT_PUBLIC_BASE_URL }}
      NEXTAUTH_URL: ${{ vars.NEXTAUTH_URL }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      CONTENT_GENERATOR_API_LINK: ${{ vars.CONTENT_GENERATOR_API_LINK }}
      NEXT_PUBLIC_MEASUREMENT_ID: ${{ secrets.NEXT_PUBLIC_MEASUREMENT_ID }}
      PORT: ${{ vars.PORT }}
      WEBSITE_TYPE: ${{ vars.WEBSITE_TYPE }}

    steps:
    - name: Check out the repository
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22.7.0'

    - name: Set up environment variables
      run: |
        echo "NEW_BUILD_DIR=/var/www/devtrend.tech/releases/$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV
        echo "PORT=3000" >> $GITHUB_ENV

    - name: Fetch the latest changes
      run: git fetch origin main

    - name: Reset to Main branch
      run: git reset --hard origin/main

    - name: Clean up old temp directory if exists
      run: |
        if [ -d "temp" ]; then
          rm -rf temp
        fi

    - name: Install dependencies
      run: |
        npm ci

    - name: Build the project in temp directory
      run: |
        mkdir -p temp
        BUILD_DIR=temp npm run build

    - name: Verify build output
      run: |
        if [ ! -d "temp" ]; then
          exit 1
        fi

    - name: Create release directory if not exists
      run: |
        if [ ! -d "releases" ]; then
          mkdir releases
        fi

    - name: Move the build to releases directory with timestamp
      run: mv temp "$NEW_BUILD_DIR"

    - name: Install SSH client
      run: sudo apt-get install -y openssh-client

    - name: Add SSH key
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add remote server to known hosts
      run: ssh-keyscan 146.190.199.118 >> ~/.ssh/known_hosts

    - name: Transfer build to VPS
      env:
        NEW_BUILD_DIR: ${{ env.NEW_BUILD_DIR }}
      run: scp -r $NEW_BUILD_DIR root@146.190.199.118:/var/www/devtrend.tech/releases/

    - name: Get the current release on VPS
      run: |
        CURRENT_RELEASE=$(ssh root@146.190.199.118 "cd /var/www/devtrend.tech && readlink .next")
        echo "CURRENT_RELEASE=$CURRENT_RELEASE" >> $GITHUB_ENV

    - name: Update the symbolic link on VPS
      env:
        NEW_BUILD_DIR: ${{ env.NEW_BUILD_DIR }}
        CURRENT_RELEASE: ${{ env.CURRENT_RELEASE }}
      run: |
        ssh root@146.190.199.118 "cd /var/www/devtrend.tech && ln -sfn $NEW_BUILD_DIR .next && echo 'Symbolic link updated to $NEW_BUILD_DIR' || { 
          ln -sfn $CURRENT_RELEASE .next  # Revert to the old release
          echo 'Failed to update symbolic link, reverted to $CURRENT_RELEASE'
          exit 1; 
        }"

    - name: Wait for 3 seconds
      run: sleep 3

    - name: Reload the pm2 process on VPS
      env:
        CURRENT_RELEASE: ${{ env.CURRENT_RELEASE }}
      run: |
        ssh root@146.190.199.118 "cd /var/www/devtrend.tech && PORT=3000 pm2 reload devtrend-tech --update-env || { 
          ln -sfn $CURRENT_RELEASE .next  # Revert to the old release
          exit 1; 
        }"

    - name: Check the number of releases and keep only 3 latest releases on VPS
      run: |
        ssh root@146.190.199.118 "cd /var/www/devtrend.tech && RELEASES_COUNT=\$(find releases -mindepth 1 -maxdepth 1 -type d | wc -l || echo 0) &&
        if [ \"\$RELEASES_COUNT\" -gt 3 ]; then
          find releases -mindepth 1 -maxdepth 1 -type d | sort | head -n -3 | xargs -I {} rm -rf {}
        fi"